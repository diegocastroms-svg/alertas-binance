# main_curto_v3.3_exaustao15.py
# ‚úÖ Igual √† v3.3 anterior
# ‚úÖ √önica altera√ß√£o: volume_ratio < 0,15 (antes era < 0,25)
# ‚úÖ Nenhuma outra linha alterada

importar os, asyncio, aiohttp, matem√°tica, tempo
de data e hora importar data e hora, fuso hor√°rio
do frasco importar frasco

BINANCE_HTTP = "https://api.binance.com"
INTERVALOS = ["5m", "15m"]
MIN_PCT = 0,0
MIN_QV = 10000,0
TEMPO DE RECARGA = 15 * 60

TOKEN = os.getenv("TELEGRAM_TOKEN")
ID_DO_CHAT = os.getenv("ID_DO_CHAT")

aplicativo = Flask(__nome__)

async def send_msg(sess√£o, texto):
    tentar:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        carga √∫til = {"chat_id": CHAT_ID, "texto": texto, "parse_mode": "HTML"}
        aguardar sess√£o.post(url, dados=carga √∫til)
    exceto Exce√ß√£o como e:
        print("Erro send_msg:", e)

def fmt(num): retornar f"{num:.6f}".rstrip("0").rstrip(".")

def nowbr():
    retornar datetime.now(timezone.utc).astimezone().strftime("%Y-%m-%d %H:%M:%S")

async def get_klines(sess√£o, s√≠mbolo, intervalo, limite=50):
    url = f"{BINANCE_HTTP}/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    ass√≠ncrono com session.get(url, timeout=10) como r:
        retornar await r.json()

async def shortlist_from_24h(sess√£o):
    url = f"{BINANCE_HTTP}/api/v3/ticker/24h"
    ass√≠ncrono com session.get(url, timeout=10) como r:
        dados = aguardar r.json()
    filtrado = [d para d em dados se d["s√≠mbolo"].endswith("USDT") e todos(x n√£o em d["s√≠mbolo"] para x em ["PARA CIMA", "PARA BAIXO", "BUSD", "FDUSD", "TUSD", "USDC", "USD1"])]
    sorted_pairs = sorted(filtrado, chave=lambda x: float(x["quoteVolume"]), reverse=True)
    retornar [d["s√≠mbolo"] para d em sorted_pairs[:50]]

def ema(valores, per√≠odo):
    k = 2 / (per√≠odo + 1)
    valores_ema = []
    para i, pre√ßo em enumerate(valores):
        se i == 0: ema_values.append(pre√ßo)
        caso contr√°rio: ema_values.append(pre√ßo * k + ema_values[-1] * (1 - k))
    retornar valores_ema

def sma(valores, per√≠odo):
    retornar [soma(valores[i-per√≠odo+1:i+1])/per√≠odo se i+1>=per√≠odo sen√£o soma(valores[:i+1])/(i+1) para i no intervalo(len(valores))]

def cruzamento_up(a, b): retorna a[-2] < b[-2] e a[-1] > b[-1]
def cruzamento_down(a, b): retorna a[-2] > b[-2] e a[-1] < b[-1]

async def process_symbol(sess√£o, s√≠mbolo):
    tentar:
        k5 = await get_klines(sess√£o, s√≠mbolo, "5m")
        k15 = await get_klines(sess√£o, s√≠mbolo, "15m")
        c5 = [float(k[4]) para k em k5]
        c15 = [float(k[4]) para k em k15]
        v5 = [float(k[5]) para k em k5]
        v15 = [float(k[5]) para k em k15]

        ema9_5, ma20_5, ma50_5, ma200_5 = ema(c5,9), sma(c5,20), sma(c5,50), sma(c5,200)
        ema9_15, ma20_15, ma50_15, ma200_15 = ema(c15,9), sma(c15,20), sma(c15,50), sma(c15,200)

        avg_vol5 = soma(v5[-10:]) / 10
        avg_vol15 = soma(v15[-10:]) / 10
        vol_ratio_5 = v5[-1] / avg_vol5 se avg_vol5 sen√£o 0
        vol_ratio_15 = v15[-1] / avg_vol15 se avg_vol15 sen√£o 0

        # ‚öôÔ∏è Ajuste √öNICO: exaust√£o 15%
        exaust√£o_5 = vol_ratio_5 < 0,15
        exaust√£o_15 = vol_ratio_15 < 0,15

        ini_5m = √≠ndices_up(ema9_5, ma20_5) ou √≠ndices_up(ema9_5, ma50_5)
        pre_5m = √≠ndices_up(ma20_5, ma200_5) ou √≠ndices_up(ma50_5, ma200_5)
        pre_15m = √≠ndices_up(ema9_15, ma200_15)
        conf_15m = √≠ndices_up(ma20_15, ma200_15) ou √≠ndices_up(ma50_15, ma200_15)

        p = fmt(c5[-1])
        hora = nowbr()

        se ini_5m e n√£o exaustao_5:
            await send_msg(session, f"üü¢ {symbol} ‚¨ÜÔ∏è Tend√™ncia iniciando (5m)\nüí∞ {p}\nüïí {hora}")
        se pre_5m e n√£o exaustao_5:
            await send_msg(session, f"üü° {symbol} ‚¨ÜÔ∏è Tend√™ncia pr√©-confirmada (5m)\nüí∞ {p}\nüïí {hora}")
        se pre_15m e n√£o exaustao_15:
            await send_msg(session, f"üü° {symbol} ‚¨ÜÔ∏è Tend√™ncia pr√©-confirmada (15m)\nüí∞ {p}\nüïí {hora}")
        se conf_15m e n√£o exaustao_15:
            await send_msg(session, f"üöÄ {symbol} ‚¨ÜÔ∏è Tend√™ncia confirmada (15m)\nüí∞ {p}\nüïí {hora}")

    exceto Exce√ß√£o como e:
        print(f"Erro {s√≠mbolo}:", e)

async def main_loop():
    ass√≠ncrono com aiohttp.ClientSession() como sess√£o:
        s√≠mbolos = aguardar shortlist_from_24h(sess√£o)
        total = len(s√≠mbolos)
        await send_msg(session, f"‚úÖ v3.3_exaustao15 intrabar ativo | {total} pares SPOT | cooldown 15m | {nowbr()} üáßüá∑")

        se total == 0:
            print("‚ö†Ô∏è Nenhum encontrado, revise filtros.")
            retornar

        tarefas = [process_symbol(session, s) para s em s√≠mbolos]
        aguarde asyncio.gather(*tarefas)

@app.route("/")
def casa():
    return "Binance Alertas v3.3_exaustao15 ativo", 200

se __nome__ == "__principal__":
    encadeamento de importa√ß√£o

    def corredor():
        enquanto Verdadeiro:
            tentar:
                asyncio.run(loop_principal())
            exceto Exce√ß√£o como e:
                print("Erro de loop:", e)
            tempo.sleep(TEMPO DE RECARGA)

    encadeamento.Thread(alvo=runner, daemon=True).start()
    app.run(host="0.0.0.0", porta=int(os.getenv("PORTA", 10000)))
